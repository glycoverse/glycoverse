[{"path":[]},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glycoverse","title":"Contributing to glycoverse","text":"outlines propose change glycoverse. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glycoverse","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glycoverse","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glycoverse","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glycoverse\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glycoverse","text":"New code follow tidyverse style guide. can use Air apply style, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glycoverse/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glycoverse","text":"Please note glycoverse project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glycoverse/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 glycoverse authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glycoverse/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glycoverse","title":"Getting help with glycoverse","text":"Thanks using glycoverse! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glycoverse/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glycoverse","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glycoverse/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glycoverse","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glycoverse/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glycoverse","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"loading-the-packages","dir":"Articles","previous_headings":"","what":"Loading the Packages","title":"Case Study: Glycoproteomics","text":"first load tidyverse package, usual. Just like tidyverse, glycoverse meta-package loads collection specialized packages .","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.2 #> ✔ ggplot2   4.0.0     ✔ tibble    3.3.0 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.1.0      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(glycoverse) #> ── Attaching core glycoverse packages ───────────────── glycoverse 0.0.0.9000 ── #> ✔ glyclean 0.6.4     ✔ glyparse 0.4.4 #> ✔ glydet   0.2.0     ✔ glyread  0.6.1 #> ✔ glyenzy  0.2.2     ✔ glyrepr  0.7.2 #> ✔ glyexp   0.9.1     ✔ glystats 0.4.2 #> ✔ glymotif 0.7.0     ✔ glyvis   0.1.2 #> ── Conflicts ───────────────────────────────────────── glycoverse_conflicts() ── #> ✖ glyclean::aggregate()  masks stats::aggregate() #> ✖ dplyr::filter()        masks stats::filter() #> ✖ lubridate::intersect() masks dplyr::intersect(), base::intersect() #> ✖ dplyr::lag()           masks stats::lag() #> ✖ glyexp::select_var()   masks dplyr::select_var() #> ✖ lubridate::setdiff()   masks dplyr::setdiff(), base::setdiff() #> ✖ dplyr::setequal()      masks base::setequal() #> ✖ lubridate::union()     masks dplyr::union(), base::union() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"reading-the-data","dir":"Articles","previous_headings":"","what":"Reading the Data","title":"Case Study: Glycoproteomics","text":"Data import typically first step analysis. tutorial, ’ll use real_experiment dataset comes glyexp. real-world N-glycoproteomics dataset 12 patients across four liver conditions: healthy controls (H), hepatitis (M), cirrhosis (Y), hepatocellular carcinoma (C), 3 samples per condition. projects, glyread package can import data virtually mainstream glycoproteomics software—pGlyco3, MSFragger-Glyco, Byonic, name . software dedicated import function. instance, data pGlyco3 pGlycoQuant quantification can loaded using read_pglyco3_pglycoquant(). Check Get Started glyread full rundown. real_experiment object (like outputs glyread functions) experiment() object. ’ve worked SummarizedExperiment Bioconductor, think experiment() tidy cousin. Essentially, ’s smart data container manages three key components: Expression matrix: quantitative data samples columns variables rows Sample information: tibble sample metadata (group, batch, demographics, etc.) Variable information: tibble feature metadata (proteins, peptides, glycan compositions, etc.) can get data components using get_expr_mat(), get_sample_info(), get_var_info(). makes experiment() objects powerful? Universal compatibility: glycoverse functions speak language. automatically know find need experiment() object, eliminates biggest headache data analysis: constantly reformatting data meet different function requirements. Synchronized operations: can use familiar dplyr-style functions filter, select, modify data, everything stays sync automatically. worrying mismatched sample names lost metadata! ’ll see benefits action throughout tutorial. deeper dive experiment() objects, check Get Started glyexp.","code":"real_experiment #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 4262 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: peptide <chr>, peptide_site <int>, protein <chr>, protein_site <int>, gene <chr>, glycan_composition <comp>, glycan_structure <struct> get_expr_mat(real_experiment)[1:5, 1:5] #>             C1         C2           C3           H1         H2 #> GP1         NA         NA     10655.62 3.105412e+04         NA #> GP2  414080036  609889761  78954431.49           NA   11724908 #> GP3  581723113  604842244 167889901.32 6.977076e+08  703566323 #> GP4 3299649335 2856490652 957651065.86 2.600523e+09 3229968280 #> GP5   30427048   34294394   6390129.81 5.159133e+07   37479075 get_sample_info(real_experiment) #> # A tibble: 12 × 2 #>    sample group #>    <chr>  <chr> #>  1 C1     C     #>  2 C2     C     #>  3 C3     C     #>  4 H1     H     #>  5 H2     H     #>  6 H3     H     #>  7 M1     M     #>  8 M2     M     #>  9 M3     M     #> 10 Y1     Y     #> 11 Y2     Y     #> 12 Y3     Y get_var_info(real_experiment) #> # A tibble: 4,262 × 8 #>    variable peptide   peptide_site protein protein_site gene  glycan_composition #>    <chr>    <chr>            <int> <chr>          <int> <chr> <comp>             #>  1 GP1      JKTQGK               1 P08185           176 SERP… Hex(5)HexNAc(4)Ne… #>  2 GP2      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)Ne… #>  3 GP3      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)    #>  4 GP4      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)Ne… #>  5 GP5      HJSTGCLR             2 P10909           291 CLU   Hex(6)HexNAc(5)    #>  6 GP6      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)Ne… #>  7 GP7      HSHNJJSS…            6 P04196           345 HRG   Hex(5)HexNAc(4)    #>  8 GP8      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)dH… #>  9 GP9      HSHNJJSS…            5 P04196           344 HRG   Hex(4)HexNAc(3)    #> 10 GP10     HSHNJJSS…            5 P04196           344 HRG   Hex(4)HexNAc(4)Ne… #> # ℹ 4,252 more rows #> # ℹ 1 more variable: glycan_structure <struct>"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data Preprocessing","title":"Case Study: Glycoproteomics","text":"Raw quantification data needs preprocessing analysis—’s just fact life omics. Typical steps include normalization, missing value imputation, batch effect correction. Rather making implement tedious steps manually, glyclean provides comprehensive preprocessing pipeline. Just call auto_clean() experiment() object ’re good go. data now analysis-ready! Want customize preprocessing steps? See Get Started glyclean full toolkit.","code":"clean_exp <- auto_clean(real_experiment) #> ℹ Normalizing data (Median) #> ✔ Normalizing data (Median) [129ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [28ms] #>  #> ℹ Imputing missing values #> ℹ Sample size <= 30, using sample minimum imputation #> ℹ Imputing missing values✔ Imputing missing values [24ms] #>  #> ℹ Aggregating data #> ✔ Aggregating data [944ms] #>  #> ℹ Normalizing data again #> ✔ Normalizing data again [17ms]"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"statistical-analysis-and-visualization","dir":"Articles","previous_headings":"","what":"Statistical Analysis and Visualization","title":"Case Study: Glycoproteomics","text":"Time fun part—statistical analysis visualization! ’ll use glystats number crunching glyvis make sense results visually. Let’s kick PCA get bird’s-eye view data structure.  glyvis isn’t designed publication-ready figures, ’s perfect quick exploratory visualization. Behind scenes, plot_pca() calls gly_pca() glystats renders results. can also break separate steps:  actually recommend two-step approach, since gives flexibility results. can create custom ggplot2 visualizations publications extract underlying data reviewers ask . glystats covers virtually standard omics analyses. functions follow naming pattern: gly_xxx()—think gly_anova(), gly_ttest(), gly_roc(), gly_cox(), gly_wgcna(), . take experiment() object first argument. return format consistent across functions—list two components: tidy_result: cleaned-tibbles tidy format. ’ve done heavy lifting organizing messy statistical output . raw_result: original statistical objects. available need dig deeper perform advanced analyses. Let’s peek inside pca_res object just created: can see, pca_res$tidy_result contains three tidy tibbles, pca_res$raw_result holds original prcomp object stats::prcomp(). Check ?gly_pca complete breakdown. ’s samples tibble looks like: Notice “group” column? ’s glystats helpful— automatically pulls relevant metadata experiment() object includes results wherever makes sense. Back autoplot() magic saw earlier. automatically recognizes different glystats result types plots accordingly— manual specification needed. plots won’t win beauty contests, ’ll get data insights across fast. PCA clearly shows samples cluster nicely condition—always good sign! Now let’s dive differential expression analysis using tried--true limma package. Excellent! Now let’s identify significantly differentially expressed glycoforms HCC healthy samples, see biological pathways ’re involved .  ’s —pathway enrichment just lines! full statistical arsenal, check Get Started glystats Get Started glyvis.","code":"plot_pca(clean_exp)  # from `glyvis` pca_res <- gly_pca(clean_exp)  # from `glystats` autoplot(pca_res)  # from `glyvis` str(pca_res, max.level = 2) #> List of 2 #>  $ tidy_result:List of 3 #>   ..$ samples    : tibble [144 × 4] (S3: tbl_df/tbl/data.frame) #>   ..$ variables  : tibble [46,560 × 8] (S3: tbl_df/tbl/data.frame) #>   ..$ eigenvalues: tibble [12 × 4] (S3: tbl_df/tbl/data.frame) #>  $ raw_result :List of 5 #>   ..$ sdev    : num [1:12] 32.8 24.8 21.3 18.6 16.8 ... #>   ..$ rotation: num [1:3880, 1:12] -0.0128 -0.0249 0.0154 0.0129 0.0175 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   ..$ center  : Named num [1:3880] 13.5 17.7 20.1 21.8 17.3 ... #>   .. ..- attr(*, \"names\")= chr [1:3880] \"V1\" \"V2\" \"V3\" \"V4\" ... #>   ..$ scale   : Named num [1:3880] 3.502 2.742 0.507 0.421 0.57 ... #>   .. ..- attr(*, \"names\")= chr [1:3880] \"V1\" \"V2\" \"V3\" \"V4\" ... #>   ..$ x       : num [1:12, 1:12] -21.32 -16.54 -6.33 59.42 51.35 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   ..- attr(*, \"class\")= chr \"prcomp\" #>  - attr(*, \"class\")= chr [1:2] \"glystats_pca_res\" \"glystats_res\" pca_res$tidy_result$samples #> # A tibble: 144 × 4 #>    sample group    PC   value #>    <chr>  <chr> <dbl>   <dbl> #>  1 C1     C         1 -21.3   #>  2 C1     C         2  24.1   #>  3 C1     C         3   0.965 #>  4 C1     C         4   1.89  #>  5 C1     C         5 -11.2   #>  6 C1     C         6  25.8   #>  7 C1     C         7  -6.01  #>  8 C1     C         8  -5.10  #>  9 C1     C         9  27.8   #> 10 C1     C        10  -7.09  #> # ℹ 134 more rows limma_res <- gly_limma(clean_exp)  # from `glystats` #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\" #> ℹ Performing multi-group limma analysis with 4 groups limma_res$tidy_result #> # A tibble: 23,280 × 13 #>    variable protein gene     glycan_composition      #>    <chr>    <chr>   <chr>    <comp>                  #>  1 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  2 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  3 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  4 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  5 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  6 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  7 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #>  8 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #>  9 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #> 10 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #> # ℹ 23,270 more rows #> # ℹ 9 more variables: glycan_structure <struct>, protein_site <int>, #> #   log2fc <dbl>, AveExpr <dbl>, t <dbl>, p <dbl>, p_adj <dbl>, b <dbl>, #> #   contrast <chr> sig_vars <- limma_res$tidy_result |>   filter(p_adj < 0.05, contrast == \"C_vs_H\") |>   pull(variable)  go_res <- clean_exp |>   filter_var(variable %in% sig_vars) |>   gly_enrich_go() #>  #>   autoplot(go_res)"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"understanding-your-data-better","dir":"Articles","previous_headings":"","what":"Understanding Your Data Better","title":"Case Study: Glycoproteomics","text":"last code chunk showcased powerful glyexp features. Let’s take moment understand ’s really happening hood. First, exactly sig_vars? first glance, look pretty cryptic: Let’s revisit variable information tibble: See first “variable” column? ’s index column keeps everything synchronized. links variable information tibble expression matrix. Take look expression matrix row names: Notice row names match “variable” column exactly, order? principle applies samples—“sample” column sample info matches expression matrix column names. experiment() keeps three data components perfectly synchronized.  course, synchronization matters ’re actually manipulating data. glyexp provides full suite dplyr-style functions data manipulation. work just like regular dplyr functions, helpful suffixes: xxx_obs() functions operate samples (observations), xxx_var() functions work variables (features). instance, let’s filter just healthy samples using filter_obs(): syntax feel familiar know dplyr::filter(). magic happens behind scenes—expression matrix updates automatically. Let’s verify filtering worked checking dimensions: essence, filter_obs() applies dplyr::filter() sample information automatically updates expression matrix match. filter_var() variables. complete catalog dplyr-style functions, check vignette. Now code snippet make perfect sense:","code":"sig_vars[1:5] #> [1] \"V2\"  \"V7\"  \"V10\" \"V11\" \"V13\" get_var_info(clean_exp)[1:5, ] #> # A tibble: 5 × 6 #>   variable protein gene     glycan_composition      #>   <chr>    <chr>   <chr>    <comp>                  #> 1 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #> 2 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #> 3 V3       P04196  HRG      Hex(5)HexNAc(4)         #> 4 V4       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #> 5 V5       P10909  CLU      Hex(6)HexNAc(5)         #> # ℹ 2 more variables: glycan_structure <struct>, protein_site <int> get_expr_mat(clean_exp)[1:5, 1:5] #>              C1           C2           C3           H1           H2 #> V1 6.626760e+03 2.019159e+04      13432.7 4.072473e+04 1.771879e+04 #> V2 3.744595e+08 5.691652e+08   99531624.5 2.372164e+04 1.422307e+07 #> V3 5.260619e+08 5.644547e+08  211645556.7 9.149818e+08 8.534716e+08 #> V4 2.983928e+09 2.665752e+09 1207235166.5 3.410355e+09 3.918161e+09 #> V5 2.751569e+07 3.200443e+07    8055532.6 6.765746e+07 4.546455e+07 # Filter the data exp_h <- clean_exp |>   filter_obs(group == \"H\") # Before filtering cli::cli_text(\"Number of rows in sample information tibble: {nrow(get_sample_info(clean_exp))}\") #> Number of rows in sample information tibble: 12 cli::cli_text(\"Number of rows in variable information tibble: {nrow(get_var_info(clean_exp))}\") #> Number of rows in variable information tibble: 3880 cli::cli_text(\"Dimensions of expression matrix: {ncol(get_expr_mat(clean_exp))} x {nrow(get_expr_mat(clean_exp))}\") #> Dimensions of expression matrix: 12 x 3880  # After filtering cli::cli_text(\"Number of rows in sample information tibble: {nrow(get_sample_info(exp_h))}\") #> Number of rows in sample information tibble: 3 cli::cli_text(\"Number of rows in variable information tibble: {nrow(get_var_info(exp_h))}\") #> Number of rows in variable information tibble: 3880 cli::cli_text(\"Dimensions of expression matrix: {ncol(get_expr_mat(exp_h))} x {nrow(get_expr_mat(exp_h))}\") #> Dimensions of expression matrix: 3 x 3880 sig_vars <- limma_res$tidy_result |>   filter(p_adj < 0.05, contrast == \"C_vs_H\") |>   pull(variable)  go_res <- clean_exp |>   filter_var(variable %in% sig_vars) |>   gly_enrich_go()"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"advanced-motif-analysis","dir":"Articles","previous_headings":"","what":"Advanced Motif Analysis","title":"Case Study: Glycoproteomics","text":"now, ’ve covered standard glycoproteomics workflows. glycoverse certainly streamlines analyses, truly shines comes advanced glycan structure analysis. diving motifs, let’s get acquainted glyrepr::glycan_structure() vectors. Just like integer() character(), glycan_structure() specialized vector type. software (like pGlyco3 StrucGP) outputs structural information text strings. import data using glyread, glyparse package automatically converts strings proper glycan_structure() vectors stores variable information tibble. Note software provides structural data—give compositions. Fortunately, example dataset includes structural information, opening world advanced analytical possibilities. Let’s explore motif analysis. Quick note: printed structures use IUPAC-condensed notation, ’ll also use defining motifs . Don’t worry looks intimidating—’ll include visual diagrams help. said, ’re planning serious structural analysis, learning IUPAC-condensed notation worth investment. Check guide get started—’s easier looks! Lewis antigen epitopes common structural motifs found N-glycans. Ignoring linkage specificity, can define three main Lewis motif families:  ’s express motifs IUPAC-condensed notation: couple important points: ’re using generic monosaccharide names (“Hex” vs. “Glc”) match typical glycoproteomics data resolution “??-?” represents unknown linkages—common limitation mass spectrometry data level structural ambiguity typical glycoproteomics. key matching motif definitions data’s resolution. ’s research question: many glycosites show differential Lewis antigen expression across conditions? Without glycoverse, nightmare tackle manually. Take moment imagine pain hand! Now, glycoverse solution: quantify_motifs() transforms data new experiment() object. Instead quantifying individual glycans per glycosite, now motif abundances per glycosite across samples. Since ’s still experiment() object, glystats functions work seamlessly—including gly_anova(). Now can answer question using standard tidyverse operations, since motif_anova_res$tidy_result$main_test just regular tibble: Want specific glycosites significant Lewis /x epitopes? Easy: ’s another common question: pathways enriched proteins carry Lewis /x epitopes? analysis, don’t need motif quantification—just need know proteins motifs. glymotif::add_motifs_lgl() perfect .  add_motifs_lgl() adds three new TRUE/FALSE columns (lewis_by, lewis_ax, sia_lewis_ax) variable information. filter_var() keeps glycoforms Lewis /x epitopes. Finally, gly_enrich_kegg() runs pathway enrichment remaining proteins. glymotif much offer beyond examples. Dive deeper Get Started glymotif.","code":"clean_exp$var_info[[\"glycan_structure\"]] #> <glycan_structure[3880]> #> [1] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [2] NeuAc(??-?)Hex(??-?)HexNAc(??-?)[HexNAc(??-?)]Hex(??-?)[Hex(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [3] Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [4] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [5] Hex(??-?)HexNAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [6] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [7] Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [8] dHex(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[dHex(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [9] Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [10] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> ... (3870 more not shown) #> # Unique structures: 951 motifs <- c(   lewis_by = \"dHex(??-?)Hex(??-?)[dHex(??-?)]HexNAc(??-\",   lewis_ax = \"Hex(??-?)[dHex(??-?)]HexNAc(??-\",   sia_lewis_ax = \"NeuAc(??-?)Hex(??-?)[dHex(??-?)]HexNAc(??-\" ) motif_anova_res <- clean_exp |>   quantify_motifs(motifs) |>  # quantify these motifs   gly_anova()  # and perform ANOVA #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\"  motif_anova_res$tidy_result$main_test #> # A tibble: 822 × 13 #>    variable protein gene     protein_site motif       term     df   sumsq meansq #>    <chr>    <chr>   <chr>           <int> <chr>       <chr> <dbl>   <dbl>  <dbl> #>  1 V1       P08185  SERPINA6          176 lewis_by    group     3   0      0     #>  2 V2       P08185  SERPINA6          176 lewis_ax    group     3   0      0     #>  3 V3       P08185  SERPINA6          176 sia_lewis_… group     3   0      0     #>  4 V4       P04196  HRG               344 lewis_by    group     3 208.    69.3   #>  5 V5       P04196  HRG               344 lewis_ax    group     3   1.30   0.433 #>  6 V6       P04196  HRG               344 sia_lewis_… group     3   0.955  0.318 #>  7 V7       P10909  CLU               291 lewis_by    group     3   2.69   0.896 #>  8 V8       P10909  CLU               291 lewis_ax    group     3   2.07   0.690 #>  9 V9       P10909  CLU               291 sia_lewis_… group     3   2.38   0.794 #> 10 V10      P04196  HRG               345 lewis_by    group     3   0      0     #> # ℹ 812 more rows #> # ℹ 4 more variables: statistic <dbl>, p_value <dbl>, p_adj <dbl>, #> #   post_hoc <chr> motif_anova_res$tidy_result$main_test |>   filter(p_adj < 0.05) |>   group_by(motif) |>   count() #> # A tibble: 3 × 2 #> # Groups:   motif [3] #>   motif            n #>   <chr>        <int> #> 1 lewis_ax        48 #> 2 lewis_by        14 #> 3 sia_lewis_ax    46 motif_anova_res$tidy_result$main_test |>   filter(p_adj < 0.05, motif == \"lewis_ax\") |>   select(protein, protein_site) #> # A tibble: 48 × 2 #>    protein protein_site #>    <chr>          <int> #>  1 P13671           855 #>  2 P01019           161 #>  3 P02790           240 #>  4 P00734           121 #>  5 P01861           177 #>  6 P20851            64 #>  7 P01859           176 #>  8 P02763           103 #>  9 P19652           103 #> 10 P26927           296 #> # ℹ 38 more rows kegg_res <- clean_exp |>   add_motifs_lgl(motifs) |>   filter_var(lewis_ax) |>   gly_enrich_kegg()  autoplot(kegg_res)"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"derived-trait-analysis","dir":"Articles","previous_headings":"","what":"Derived Trait Analysis","title":"Case Study: Glycoproteomics","text":"Let’s wrap derived traits—clever analytical approach developed N-glycomics community glycome characterization. Classic examples include: High-mannose glycan proportion Core-fucosylation rate within complex glycans Average sialylation per galactose residue glydet adapts concept glycoproteomics treating glycosite mini-glycome. enables site-specific trait calculation much richer biological insights. Using glydet couldn’t simpler: ’s ! Just like quantify_motifs(), derive_traits() creates new experiment() object, now trait values per glycosite per sample. variable information shows ’re working : “trait” column lists derived traits can analyze. glydet comes comprehensive set built-traits: TM: Proportion high-mannose glycans TH: Proportion hybrid glycans TC: Proportion complex glycans MM: Average number mannoses within high-mannose glycans CA2: Proportion bi-antennary glycans within complex glycans CA3: Proportion tri-antennary glycans within complex glycans CA4: Proportion tetra-antennary glycans within complex glycans TF: Proportion fucosylated glycans TFc: Proportion core-fucosylated glycans TFa: Proportion arm-fucosylated glycans TB: Proportion glycans bisecting GlcNAc SG: Average degree sialylation per galactose GA: Average degree galactosylation per antenna TS: Proportion sialylated glycans represent widely used traits glycomics literature. Let’s identify glycosites significantly different core-fucosylation levels (TFc) across conditions: , ’s just straightforward. just scratches surface glydet’s capabilities. real power lies defining custom traits tailored research questions. Explore possibilities Get Started glydet.","code":"trait_exp <- derive_traits(clean_exp)  # from `glydet` trait_exp #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 3836 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr> get_var_info(trait_exp) #> # A tibble: 3,836 × 5 #>    variable protein protein_site trait gene  #>    <chr>    <chr>          <int> <chr> <chr> #>  1 V1       A6NJW9            49 TM    CD8B2 #>  2 V2       A6NJW9            49 TH    CD8B2 #>  3 V3       A6NJW9            49 TC    CD8B2 #>  4 V4       A6NJW9            49 MM    CD8B2 #>  5 V5       A6NJW9            49 CA2   CD8B2 #>  6 V6       A6NJW9            49 CA3   CD8B2 #>  7 V7       A6NJW9            49 CA4   CD8B2 #>  8 V8       A6NJW9            49 TF    CD8B2 #>  9 V9       A6NJW9            49 TFc   CD8B2 #> 10 V10      A6NJW9            49 TFa   CD8B2 #> # ℹ 3,826 more rows trait_anova_res <- gly_anova(trait_exp) #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\" #> Warning: 267 variables failed to fit the model trait_anova_res$tidy_result$main_test |>   filter(trait == \"TFc\", p_adj < 0.05) #> # A tibble: 12 × 13 #>    variable protein protein_site trait gene   term     df     sumsq    meansq #>    <chr>    <chr>          <int> <chr> <chr>  <chr> <dbl>     <dbl>     <dbl> #>  1 V457     P00748           249 TFc   F12    group     3 0.000548  0.000183  #>  2 V709     P01591            71 TFc   JCHAIN group     3 0.0771    0.0257    #>  3 V919     P02679            78 TFc   FGG    group     3 0.00365   0.00122   #>  4 V1115    P02765           176 TFc   AHSG   group     3 0.0000941 0.0000314 #>  5 V1227    P02790           240 TFc   HPX    group     3 0.0629    0.0210    #>  6 V1353    P03952           494 TFc   KLKB1  group     3 0.00231   0.000770  #>  7 V1381    P04004            86 TFc   VTN    group     3 0.00640   0.00213   #>  8 V1661    P04278           396 TFc   SHBG   group     3 0.0299    0.00998   #>  9 V1675    P05090            98 TFc   APOD   group     3 0.0174    0.00581   #> 10 V2165    P0C0L4          1328 TFc   C4A    group     3 0.0174    0.00581   #> 11 V2487    P19652           103 TFc   ORM2   group     3 0.0644    0.0215    #> 12 V2837    P43652            33 TFc   AFM    group     3 0.00547   0.00182   #> # ℹ 4 more variables: statistic <dbl>, p_value <dbl>, p_adj <dbl>, #> #   post_hoc <chr>"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-1.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s Next?","title":"Case Study: Glycoproteomics","text":"vignette given taste glycoverse action real-world glycoproteomics workflow. ’ve barely scratched surface! Now ’ve got basics , ’re ready unlock full potential package. ’s roadmap mastering component: glyexp — Master experiment objects data manipulation glyread — Import organize glycoproteomics data glyclean — Build custom preprocessing pipelines glystats — Explore full statistical toolkit glyvis — Create stunning visualizations glymotif — Define analyze custom motifs glydet — Create powerful derived traits glyenzy — Explore enzyme-substrate relationships (didn’t cover one, ’s fascinating!) glyrepr — Master glycan structure representation glyparse — Parse convert structural formats Happy glycan hunting! 🧬","code":""},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"loading-the-packages","dir":"Articles","previous_headings":"","what":"Loading the Packages","title":"Case Study: Glycomics","text":"first load tidyverse package, usual. Just like tidyverse, glycoverse meta-package loads collection specialized packages .","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.2 #> ✔ ggplot2   4.0.0     ✔ tibble    3.3.0 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.1.0      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(glycoverse) #> ── Attaching core glycoverse packages ───────────────── glycoverse 0.0.0.9000 ── #> ✔ glyclean 0.6.4     ✔ glyparse 0.4.4 #> ✔ glydet   0.2.0     ✔ glyread  0.6.1 #> ✔ glyenzy  0.2.2     ✔ glyrepr  0.7.2 #> ✔ glyexp   0.9.1     ✔ glystats 0.4.2 #> ✔ glymotif 0.7.0     ✔ glyvis   0.1.2 #> ── Conflicts ───────────────────────────────────────── glycoverse_conflicts() ── #> ✖ glyclean::aggregate()  masks stats::aggregate() #> ✖ dplyr::filter()        masks stats::filter() #> ✖ lubridate::intersect() masks dplyr::intersect(), base::intersect() #> ✖ dplyr::lag()           masks stats::lag() #> ✖ glyexp::select_var()   masks dplyr::select_var() #> ✖ lubridate::setdiff()   masks dplyr::setdiff(), base::setdiff() #> ✖ dplyr::setequal()      masks base::setequal() #> ✖ lubridate::union()     masks dplyr::union(), base::union() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"reading-the-data","dir":"Articles","previous_headings":"","what":"Reading the Data","title":"Case Study: Glycomics","text":"Data import typically first step analysis. tutorial, ’ll use real_experiment2 dataset comes glyexp. real-world N-glycomics dataset 144 patients across four liver conditions: healthy controls (H), hepatitis (M), cirrhosis (Y), hepatocellular carcinoma (C). glycomics projects, can create experiment() object manually. See document details. real_experiment2 object experiment() object. ’ve worked SummarizedExperiment Bioconductor, think experiment() tidy cousin. Essentially, ’s smart data container manages three key components: Expression matrix: quantitative data samples columns variables rows Sample information: tibble sample metadata (group, batch, demographics, etc.) Variable information: tibble feature metadata (glycan compositions, glycan structures, etc.) can get data components using get_expr_mat(), get_sample_info(), get_var_info(). makes experiment() objects powerful? Universal compatibility: glycoverse functions speak language. automatically know find need experiment() object, eliminates biggest headache data analysis: constantly reformatting data meet different function requirements. Synchronized operations: can use familiar dplyr-style functions filter, select, modify data, everything stays sync automatically. worrying mismatched sample names lost metadata! ’ll see benefits action throughout tutorial. deeper dive experiment() objects, check Get Started glyexp.","code":"real_experiment2 #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 144 samples, 67 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: glycan_composition <comp>, glycan_structure <struct> get_expr_mat(real_experiment2)[1:5, 1:5] #>          S1       S2       S3       S4       S5 #> V1 1354.352 1884.387 1389.444 2034.693 1472.504 #> V2 3315.779 2500.308 1247.036 3102.668 2903.602 #> V3 6940.940 5911.016 1686.319 4071.061 4349.991 #> V4 4437.816 7535.886 2053.077 4773.249 3142.817 #> V5 1346.274 1663.375 1043.464 1765.550 1184.083 get_sample_info(real_experiment2) #> # A tibble: 144 × 2 #>    sample group #>    <chr>  <chr> #>  1 S1     H     #>  2 S2     H     #>  3 S3     Y     #>  4 S4     C     #>  5 S5     H     #>  6 S6     C     #>  7 S7     M     #>  8 S8     C     #>  9 S9     M     #> 10 S10    M     #> # ℹ 134 more rows get_var_info(real_experiment2) #> # A tibble: 67 × 3 #>    variable glycan_composition                   #>    <chr>    <comp>                               #>  1 V1       Man(3)GlcNAc(3)                      #>  2 V2       Man(3)GlcNAc(7)                      #>  3 V3       Man(5)GlcNAc(2)                      #>  4 V4       Man(4)Gal(2)GlcNAc(4)Neu5Ac(2)       #>  5 V5       Man(3)Gal(1)GlcNAc(3)                #>  6 V6       Man(3)Gal(2)GlcNAc(4)Fuc(2)          #>  7 V7       Man(3)GlcNAc(3)Fuc(1)                #>  8 V8       Man(3)GlcNAc(4)                      #>  9 V9       Man(3)Gal(2)GlcNAc(5)Neu5Ac(1)       #> 10 V10      Man(3)Gal(1)GlcNAc(5)Fuc(1)Neu5Ac(1) #> # ℹ 57 more rows #> # ℹ 1 more variable: glycan_structure <struct>"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data Preprocessing","title":"Case Study: Glycomics","text":"Raw quantification data needs preprocessing analysis—’s just fact life omics. Typical steps include normalization, missing value imputation, batch effect correction. Rather making implement tedious steps manually, glyclean provides comprehensive preprocessing pipeline. Just call auto_clean() experiment() object ’re good go. data now analysis-ready! Want customize preprocessing steps? See Get Started glyclean full toolkit.","code":"clean_exp <- auto_clean(real_experiment2) #> ℹ Normalizing data (Median Quotient) #> ✔ Normalizing data (Median Quotient) [18ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [28ms] #>  #> ℹ Imputing missing values #> ℹ Sample size > 100, using MissForest imputation #> ℹ Imputing missing values✔ Imputing missing values [14.2s] #>  #> ℹ Normalizing data (Total Area) #> ✔ Normalizing data (Total Area) [14ms]"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"statistical-analysis-and-visualization","dir":"Articles","previous_headings":"","what":"Statistical Analysis and Visualization","title":"Case Study: Glycomics","text":"Time fun part—statistical analysis visualization! ’ll use glystats number crunching glyvis make sense results visually. Let’s kick PCA get bird’s-eye view data structure.  glyvis isn’t designed publication-ready figures, ’s perfect quick exploratory visualization. Behind scenes, plot_pca() calls gly_pca() glystats renders results. can also break separate steps:  actually recommend two-step approach, since gives flexibility results. can create custom ggplot2 visualizations publications extract underlying data reviewers ask . glystats covers virtually standard omics analyses. functions follow naming pattern: gly_xxx()—think gly_anova(), gly_ttest(), gly_roc(), gly_cox(), gly_wgcna(), . take experiment() object first argument. return format consistent across functions—list two components: tidy_result: cleaned-tibbles tidy format. ’ve done heavy lifting organizing messy statistical output . raw_result: original statistical objects. available need dig deeper perform advanced analyses. Let’s peek inside pca_res object just created: can see, pca_res$tidy_result contains three tidy tibbles, pca_res$raw_result holds original prcomp object stats::prcomp(). Check ?gly_pca complete breakdown. ’s samples tibble looks like: Notice “group” column? ’s glystats helpful— automatically pulls relevant metadata experiment() object includes results wherever makes sense. Back autoplot() magic saw earlier. automatically recognizes different glystats result types plots accordingly— manual specification needed. plots won’t win beauty contests, ’ll get data insights across fast. Now let’s dive differential expression analysis using tried--true limma package. Excellent! Now let’s identify significantly differentially expressed glycans HCC healthy samples. full statistical arsenal, check Get Started glystats Get Started glyvis.","code":"plot_pca(clean_exp)  # from `glyvis` pca_res <- gly_pca(clean_exp)  # from `glystats` autoplot(pca_res)  # from `glyvis` str(pca_res, max.level = 2) #> List of 2 #>  $ tidy_result:List of 3 #>   ..$ samples    : tibble [7,488 × 4] (S3: tbl_df/tbl/data.frame) #>   ..$ variables  : tibble [2,704 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ eigenvalues: tibble [52 × 4] (S3: tbl_df/tbl/data.frame) #>  $ raw_result :List of 5 #>   ..$ sdev    : num [1:52] 4.22 2.52 2.37 1.85 1.57 ... #>   ..$ rotation: num [1:52, 1:52] -0.0755 -0.0905 -0.1817 -0.0532 -0.1163 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   ..$ center  : Named num [1:52] 0.000984 0.001836 0.003949 0.003128 0.000923 ... #>   .. ..- attr(*, \"names\")= chr [1:52] \"V1\" \"V2\" \"V3\" \"V4\" ... #>   ..$ scale   : Named num [1:52] 0.000449 0.000553 0.001532 0.002131 0.000291 ... #>   .. ..- attr(*, \"names\")= chr [1:52] \"V1\" \"V2\" \"V3\" \"V4\" ... #>   ..$ x       : num [1:144, 1:52] 1.168 3.486 -0.165 2.036 5.837 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   ..- attr(*, \"class\")= chr \"prcomp\" #>  - attr(*, \"class\")= chr [1:2] \"glystats_pca_res\" \"glystats_res\" pca_res$tidy_result$samples #> # A tibble: 7,488 × 4 #>    sample group    PC  value #>    <chr>  <chr> <dbl>  <dbl> #>  1 S1     H         1  1.17  #>  2 S1     H         2  1.17  #>  3 S1     H         3 -1.18  #>  4 S1     H         4 -1.79  #>  5 S1     H         5  1.29  #>  6 S1     H         6 -1.89  #>  7 S1     H         7 -2.23  #>  8 S1     H         8  1.48  #>  9 S1     H         9 -1.65  #> 10 S1     H        10 -0.477 #> # ℹ 7,478 more rows limma_res <- gly_limma(clean_exp)  # from `glystats` #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\" #> ℹ Performing multi-group limma analysis with 4 groups limma_res$tidy_result #> # A tibble: 312 × 10 #>    variable glycan_composition #>    <chr>    <comp>             #>  1 V1       Man(3)GlcNAc(3)    #>  2 V1       Man(3)GlcNAc(3)    #>  3 V1       Man(3)GlcNAc(3)    #>  4 V1       Man(3)GlcNAc(3)    #>  5 V1       Man(3)GlcNAc(3)    #>  6 V1       Man(3)GlcNAc(3)    #>  7 V2       Man(3)GlcNAc(7)    #>  8 V2       Man(3)GlcNAc(7)    #>  9 V2       Man(3)GlcNAc(7)    #> 10 V2       Man(3)GlcNAc(7)    #> # ℹ 302 more rows #> # ℹ 8 more variables: glycan_structure <struct>, log2fc <dbl>, AveExpr <dbl>, #> #   t <dbl>, p <dbl>, p_adj <dbl>, b <dbl>, contrast <chr> limma_res$tidy_result |>   filter(p_adj < 0.05, contrast == \"C_vs_H\") |>   select(glycan_composition, p_adj, log2fc) #> # A tibble: 15 × 3 #>    glycan_composition                          p_adj    log2fc #>    <comp>                                      <dbl>     <dbl> #>  1 Man(3)GlcNAc(4)Fuc(1)                0.000000449   0.0172   #>  2 Man(3)GlcNAc(5)                      0.0282        0.000768 #>  3 Man(3)Gal(1)GlcNAc(5)Neu5Ac(1)       0.0285        0.00105  #>  4 Man(3)GlcNAc(5)Fuc(1)                0.000411      0.00291  #>  5 Man(3)Gal(1)GlcNAc(5)Fuc(1)          0.00441       0.00493  #>  6 Man(3)Gal(2)GlcNAc(4)Fuc(1)Neu5Ac(2) 0.0418        0.0114   #>  7 Man(3)Gal(1)GlcNAc(5)                0.0195        0.00114  #>  8 Man(3)Gal(1)GlcNAc(4)Fuc(1)          0.0173        0.0137   #>  9 Man(3)Gal(2)GlcNAc(4)Neu5Ac(1)       0.00334      -0.0141   #> 10 Man(3)Gal(3)GlcNAc(5)Neu5Ac(2)       0.0000535    -0.00477  #> 11 Man(3)Gal(3)GlcNAc(5)Fuc(1)Neu5Ac(2) 0.000000449   0.00406  #> 12 Man(3)Gal(3)GlcNAc(5)Neu5Ac(3)       0.00106      -0.0264   #> 13 Man(3)Gal(4)GlcNAc(6)Neu5Ac(2)       0.0130        0.00128  #> 14 Man(3)Gal(3)GlcNAc(5)Fuc(1)Neu5Ac(3) 0.0000000237  0.0342   #> 15 Man(3)Gal(3)GlcNAc(5)Fuc(2)Neu5Ac(3) 0.000411      0.00197"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"understanding-your-data-better","dir":"Articles","previous_headings":"","what":"Understanding Your Data Better","title":"Case Study: Glycomics","text":"want subset experiment keep “H” “C” samples, significant glycans . last code chunk showcased powerful glyexp features. Let’s take moment understand ’s really happening hood. First, exactly sig_vars? first glance, look pretty cryptic: Let’s revisit variable information tibble: See first “variable” column? ’s index column keeps everything synchronized. links variable information tibble expression matrix. Take look expression matrix row names: Notice row names match “variable” column exactly, order? principle applies samples—“sample” column sample info matches expression matrix column names. experiment() keeps three data components perfectly synchronized.  course, synchronization matters ’re actually manipulating data. glyexp provides full suite dplyr-style functions data manipulation. work just like regular dplyr functions, helpful suffixes: xxx_obs() functions operate samples (observations), xxx_var() functions work variables (features). instance, let’s filter just healthy samples using filter_obs(): syntax feel familiar know dplyr::filter(). magic happens behind scenes—expression matrix updates automatically. Let’s verify filtering worked checking dimensions: essence, filter_obs() applies dplyr::filter() sample information automatically updates expression matrix match. filter_var() variables. complete catalog dplyr-style functions, check vignette. Now code snippet make perfect sense:","code":"sig_vars <- limma_res$tidy_result |>   filter(p_adj < 0.05, contrast == \"C_vs_H\") |>   pull(variable)  sub_exp <- clean_exp |>   filter_var(variable %in% sig_vars) |>   filter_obs(group %in% c(\"H\", \"C\"))  sub_exp #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 73 samples, 15 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: glycan_composition <comp>, glycan_structure <struct> sig_vars[1:5] #> [1] \"V19\" \"V20\" \"V21\" \"V27\" \"V32\" get_var_info(clean_exp)[1:5, ] #> # A tibble: 5 × 3 #>   variable glycan_composition             #>   <chr>    <comp>                         #> 1 V1       Man(3)GlcNAc(3)                #> 2 V2       Man(3)GlcNAc(7)                #> 3 V3       Man(5)GlcNAc(2)                #> 4 V4       Man(4)Gal(2)GlcNAc(4)Neu5Ac(2) #> 5 V5       Man(3)Gal(1)GlcNAc(3)          #> # ℹ 1 more variable: glycan_structure <struct> get_expr_mat(clean_exp)[1:5, 1:5] #>              S1           S2          S3           S4           S5 #> V1 0.0008735189 0.0010297263 0.001797452 0.0010678250 0.0008232803 #> V2 0.0021385840 0.0013662972 0.001613227 0.0016283078 0.0016234107 #> V3 0.0044767113 0.0032300837 0.002181504 0.0021365292 0.0024320901 #> V4 0.0028622668 0.0041179968 0.002655960 0.0025050435 0.0017571563 #> V5 0.0008683088 0.0009089539 0.001349876 0.0009265763 0.0006620237 # Filter the data exp_h <- clean_exp |>   filter_obs(group == \"H\") # Before filtering cli::cli_text(\"Number of rows in sample information tibble: {nrow(get_sample_info(clean_exp))}\") #> Number of rows in sample information tibble: 144 cli::cli_text(\"Number of rows in variable information tibble: {nrow(get_var_info(clean_exp))}\") #> Number of rows in variable information tibble: 52 cli::cli_text(\"Dimensions of expression matrix: {ncol(get_expr_mat(clean_exp))} x {nrow(get_expr_mat(clean_exp))}\") #> Dimensions of expression matrix: 144 x 52  # After filtering cli::cli_text(\"Number of rows in sample information tibble: {nrow(get_sample_info(exp_h))}\") #> Number of rows in sample information tibble: 26 cli::cli_text(\"Number of rows in variable information tibble: {nrow(get_var_info(exp_h))}\") #> Number of rows in variable information tibble: 52 cli::cli_text(\"Dimensions of expression matrix: {ncol(get_expr_mat(exp_h))} x {nrow(get_expr_mat(exp_h))}\") #> Dimensions of expression matrix: 26 x 52 sig_vars <- limma_res$tidy_result |>   filter(p_adj < 0.05, contrast == \"C_vs_H\") |>   pull(variable)  sub_exp <- clean_exp |>   filter_var(variable %in% sig_vars) |>   filter_obs(group %in% c(\"H\", \"C\"))"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"advanced-motif-analysis","dir":"Articles","previous_headings":"","what":"Advanced Motif Analysis","title":"Case Study: Glycomics","text":"now, ’ve covered standard glycomics workflows. glycoverse certainly streamlines analyses, truly shines comes advanced glycan structure analysis. diving motifs, let’s get acquainted glyrepr::glycan_structure() vectors. Just like integer() character(), glycan_structure() specialized vector type. software (like pGlyco3 StrucGP) outputs structural information text strings. import data using glyread, glyparse package automatically converts strings proper glycan_structure() vectors stores variable information tibble. Note software provides structural data—give compositions. glycomics data, information hard come automatically. can manually parsing glycan structure strings using glyparse using left_join_var() join parsed structures variable information tibble. Fortunately, example dataset includes structural information, opening world advanced analytical possibilities. Let’s explore motif analysis. Quick note: printed structures use IUPAC-condensed notation, ’ll also use defining motifs . Don’t worry looks intimidating—’ll include visual diagrams help. said, ’re planning serious structural analysis, learning IUPAC-condensed notation worth investment. Check guide get started—’s easier looks! Human serum N-glycans can three types branch terminals (ignoring a1-3 Fuc): Sialyl-LacNAc motif LacNAc motif without sialic acids GlcNAc without elongation  ’s express motifs IUPAC-condensed notation: “??-?” represents unknown linkages—common limitation mass spectrometry data. ’s research question: branching motif show differential expression across conditions? Without glycoverse, nightmare tackle manually. Take moment imagine pain hand! Now, glycoverse solution: quantify_motifs() transforms data new experiment() object. Instead quantification glycans, now motif abundances across samples. Since ’s still experiment() object, glystats functions work seamlessly—including gly_anova(). Now can answer question using standard tidyverse operations, since motif_anova_res$tidy_result$main_test just regular tibble: ’s another common question: three branching motifs appears glycans? analysis, don’t need motif quantification—just need know glycans motifs. glymotif::add_motifs_lgl() perfect . add_motifs_lgl() adds three new TRUE/FALSE columns (motif1, motif2, motif3) variable information. glymotif much offer beyond examples. Dive deeper Get Started glymotif.","code":"clean_exp$var_info[[\"glycan_structure\"]] #> <glycan_structure[52]> #> [1] GlcNAc(?1-?)Man(?1-?)[Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [2] GlcNAc(?1-?)[GlcNAc(?1-?)]Man(?1-?)[GlcNAc(?1-?)][GlcNAc(?1-?)[GlcNAc(?1-?)]Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [3] Man(?1-?)[Man(?1-?)]Man(?1-?)[Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [4] Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1-?)[Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1-?)]Man(?1-?)[Man(?1-?)Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [5] Gal(?1-?)GlcNAc(?1-?)Man(?1-?)[Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [6] GlcNAc(?1-?)Man(?1-?)[Man(?1-?)]Man(?1-?)GlcNAc(?1-?)[Fuc(?1-?)]GlcNAc(?1- #> [7] GlcNAc(?1-?)Man(?1-?)[GlcNAc(?1-?)Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [8] Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1-?)Man(?1-?)[GlcNAc(?1-?)][Gal(?1-?)GlcNAc(?1-?)Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> [9] Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1-?)Man(?1-?)[GlcNAc(?1-?)][GlcNAc(?1-?)Man(?1-?)]Man(?1-?)GlcNAc(?1-?)[Fuc(?1-?)]GlcNAc(?1- #> [10] Man(?1-?)[Man(?1-?)]Man(?1-?)[GlcNAc(?1-?)Man(?1-?)]Man(?1-?)GlcNAc(?1-?)GlcNAc(?1- #> ... (42 more not shown) #> # Unique structures: 52 motifs <- c(   motif1 = \"Neu5Ac(??-?)Gal(??-?)GlcNAc(??-\",   motif2 = \"Gal(??-?)GlcNAc(??-\",   motif3 = \"GlcNAc(??-\" ) motif_anova_res <- clean_exp |>   quantify_motifs(motifs, alignments = \"terminal\") |>  # quantify these motifs   gly_anova()  # and perform ANOVA #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\"  motif_anova_res$tidy_result$main_test #> # A tibble: 3 × 10 #>   variable motif  term     df  sumsq  meansq statistic  p_value   p_adj post_hoc #>   <chr>    <chr>  <chr> <dbl>  <dbl>   <dbl>     <dbl>    <dbl>   <dbl> <chr>    #> 1 V1       motif1 group     3 0.0209 0.00695      1.18 0.319    0.319   NA       #> 2 V2       motif2 group     3 0.0257 0.00856      1.93 0.128    0.192   NA       #> 3 V3       motif3 group     3 0.102  0.0341       5.90 0.000808 0.00242 H-C;M-C… motif_anova_res$tidy_result$main_test |>   filter(p_adj < 0.05) #> # A tibble: 1 × 10 #>   variable motif  term     df sumsq meansq statistic  p_value   p_adj post_hoc   #>   <chr>    <chr>  <chr> <dbl> <dbl>  <dbl>     <dbl>    <dbl>   <dbl> <chr>      #> 1 V3       motif3 group     3 0.102 0.0341      5.90 0.000808 0.00242 H-C;M-C;Y… clean_exp |>   add_motifs_lgl(motifs, alignments = \"terminal\") |>   get_var_info() |>   select(glycan_composition, motif1, motif2, motif3) |>   pivot_longer(-glycan_composition, names_to = \"motif\", values_to = \"has_motif\") |>   summarise(n = sum(has_motif), .by = \"motif\") #> # A tibble: 3 × 2 #>   motif      n #>   <chr>  <int> #> 1 motif1    27 #> 2 motif2    21 #> 3 motif3    23"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"derived-trait-analysis","dir":"Articles","previous_headings":"","what":"Derived Trait Analysis","title":"Case Study: Glycomics","text":"Let’s wrap derived traits—clever analytical approach developed N-glycomics community glycome characterization. Classic examples include: High-mannose glycan proportion Core-fucosylation rate within complex glycans Average sialylation per galactose residue glydet calculates derived traits flash. Using couldn’t simpler: ’s ! Just like quantify_motifs(), derive_traits() creates new experiment() object, now trait values per sample. variable information shows ’re working : “trait” column lists derived traits can analyze. glydet comes comprehensive set built-traits: TM: Proportion high-mannose glycans TH: Proportion hybrid glycans TC: Proportion complex glycans MM: Average number mannoses within high-mannose glycans CA2: Proportion bi-antennary glycans within complex glycans CA3: Proportion tri-antennary glycans within complex glycans CA4: Proportion tetra-antennary glycans within complex glycans TF: Proportion fucosylated glycans TFc: Proportion core-fucosylated glycans TFa: Proportion arm-fucosylated glycans TB: Proportion glycans bisecting GlcNAc SG: Average degree sialylation per galactose GA: Average degree galactosylation per antenna TS: Proportion sialylated glycans represent widely used traits glycomics literature. Let’s identify traits significantly different values across conditions: , ’s just straightforward. just scratches surface glydet’s capabilities. real power lies defining custom traits tailored research questions. Explore possibilities Get Started glydet.","code":"trait_exp <- derive_traits(clean_exp)  # from `glydet` trait_exp #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 144 samples, 14 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: trait <chr> get_var_info(trait_exp) #> # A tibble: 14 × 2 #>    variable trait #>    <chr>    <chr> #>  1 V1       TM    #>  2 V2       TH    #>  3 V3       TC    #>  4 V4       MM    #>  5 V5       CA2   #>  6 V6       CA3   #>  7 V7       CA4   #>  8 V8       TF    #>  9 V9       TFc   #> 10 V10      TFa   #> 11 V11      TB    #> 12 V12      SG    #> 13 V13      GA    #> 14 V14      TS trait_anova_res <- gly_anova(trait_exp) #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\" trait_anova_res$tidy_result$main_test |>   filter(p_adj < 0.05) #> # A tibble: 8 × 10 #>   variable trait term     df    sumsq  meansq statistic p_value   p_adj post_hoc #>   <chr>    <chr> <chr> <dbl>    <dbl>   <dbl>     <dbl>   <dbl>   <dbl> <chr>    #> 1 V5       CA2   group     3  8.60e-3 2.87e-3      5.70 1.04e-3 2.65e-3 M-C;Y-C  #> 2 V6       CA3   group     3  2.19e-2 7.30e-3      5.63 1.13e-3 2.65e-3 M-C;Y-C  #> 3 V7       CA4   group     3  6.94e-5 2.31e-5      6.08 6.42e-4 2.25e-3 M-C      #> 4 V8       TF    group     3  1.08e-1 3.62e-2      7.88 6.81e-5 3.26e-4 H-C;M-C… #> 5 V9       TFc   group     3  1.08e-1 3.62e-2      7.88 6.81e-5 3.26e-4 H-C;M-C… #> 6 V10      TFa   group     3  1.31e-4 4.35e-5      7.85 6.99e-5 3.26e-4 H-C;M-C… #> 7 V11      TB    group     3  1.14e-2 3.81e-3      3.59 1.55e-2 2.71e-2 Y-H      #> 8 V13      GA    group     3  5.35e-3 1.78e-3      3.85 1.10e-2 2.20e-2 H-C"},{"path":"https://glycoverse.github.io/glycoverse/articles/case-study-2.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s Next?","title":"Case Study: Glycomics","text":"vignette given taste glycoverse action real-world glycomics workflow. ’ve barely scratched surface! Now ’ve got basics , ’re ready unlock full potential package. ’s roadmap mastering component: glyexp — Master experiment objects data manipulation glyread — Import organize glycomics data glyclean — Build custom preprocessing pipelines glystats — Explore full statistical toolkit glyvis — Create stunning visualizations glymotif — Define analyze custom motifs glydet — Create powerful derived traits glyenzy — Explore enzyme-substrate relationships (didn’t cover one, ’s fascinating!) glyrepr — Master glycan structure representation glyparse — Parse convert structural formats Happy glycan hunting! 🧬","code":""},{"path":"https://glycoverse.github.io/glycoverse/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer.","code":""},{"path":"https://glycoverse.github.io/glycoverse/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glycoverse: Easy Install Load 'Glycoverse'. R package version 0.0.0.9000, https://glycoverse.github.io/glycoverse/.","code":"@Manual{,   title = {glycoverse: Easy Install and Load the `Glycoverse`},   author = {Bin Fu},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://glycoverse.github.io/glycoverse/}, }"},{"path":"https://glycoverse.github.io/glycoverse/index.html","id":"glycoverse-","dir":"","previous_headings":"","what":"Easy Install and Load the `Glycoverse`","title":"Easy Install and Load the `Glycoverse`","text":"‘glycoverse’ set packages together form comprehensive pipeline glycomics glycoproteomics data analysis. package designed make easy install load multiple ‘glycoverse’ packages single step.","code":""},{"path":"https://glycoverse.github.io/glycoverse/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy Install and Load the `Glycoverse`","text":"can install latest release glycoverse GitHub : install development version:","code":"# install.packages(\"remotes\") remotes::install_github(\"glycoverse/glycoverse@*release\") remotes::install_github(\"glycoverse/glycoverse\")"},{"path":"https://glycoverse.github.io/glycoverse/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Easy Install and Load the `Glycoverse`","text":"two case studies showcase basic workflow glycoverse: Case Study: Glycoproteomics Case Study: Glycomics Choose one get started, refer documentation individual packages details.","code":""},{"path":"https://glycoverse.github.io/glycoverse/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Easy Install and Load the `Glycoverse`","text":"library(glycoverse) load core packages glycoverse ecosystem: includes: Omics data analysis glyexp, data management glyread, data import glyclean, data cleaning preprocessing glystats, statistical analysis glyvis, data visualization Glycan structure analysis glyrepr, glycan structure representation glyparse, glycan structure parsing glymotif, glycan structure motif analysis glydet, glycan derived trait analysis glyenzy, glycan biosynthesis pathway analysis also get condensed summary conflicts packages loaded: can update packages glycoverse_update():","code":"library(glycoverse) #> ── Attaching core glycoverse packages ───────────────── glycoverse 0.0.0.9000 ── #> ✔ glyclean 0.6.4     ✔ glyparse 0.4.4 #> ✔ glydet   0.2.0     ✔ glyread  0.6.1 #> ✔ glyenzy  0.2.2     ✔ glyrepr  0.7.2 #> ✔ glyexp   0.9.1     ✔ glystats 0.4.2 #> ✔ glymotif 0.7.0     ✔ glyvis   0.1.2 #> ── Conflicts ───────────────────────────────────────── glycoverse_conflicts() ── #> ✖ glyclean::aggregate() masks stats::aggregate() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors glycoverse_update() #> All glycoverse packages up-to-date"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glycoverse: Easy Install and Load the `Glycoverse` — glycoverse-package","title":"glycoverse: Easy Install and Load the `Glycoverse` — glycoverse-package","text":"'glycoverse' set packages together form comprehensive pipeline glycomics glycoproteomics data analysis. package designed make easy install load multiple 'glycoverse' packages single step.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glycoverse: Easy Install and Load the `Glycoverse` — glycoverse-package","text":"Maintainer: Bin Fu 23110220018@m.fudan.edu.cn (ORCID)","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_conflicts.html","id":null,"dir":"Reference","previous_headings":"","what":"Conflicts between the glycoverse and other packages — glycoverse_conflicts","title":"Conflicts between the glycoverse and other packages — glycoverse_conflicts","text":"function lists conflicts packages glycoverse packages loaded.","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_conflicts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conflicts between the glycoverse and other packages — glycoverse_conflicts","text":"","code":"glycoverse_conflicts(only = NULL)"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_conflicts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conflicts between the glycoverse and other packages — glycoverse_conflicts","text":"Set character vector restrict conflicts packages.","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_conflicts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conflicts between the glycoverse and other packages — glycoverse_conflicts","text":"four conflicts deliberately ignored: intersect, union, setequal, setdiff dplyr. functions make base equivalents generic, negatively affect existing code.","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_conflicts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conflicts between the glycoverse and other packages — glycoverse_conflicts","text":"","code":"glycoverse_conflicts() #> ── Conflicts ───────────────────────────────────────── glycoverse_conflicts() ── #> ✖ glyclean::aggregate() masks stats::aggregate() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"List all glycoverse dependencies — glycoverse_deps","title":"List all glycoverse dependencies — glycoverse_deps","text":"List glycoverse dependencies","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all glycoverse dependencies — glycoverse_deps","text":"","code":"glycoverse_deps(recursive = FALSE, repos = getOption(\"repos\"))"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all glycoverse dependencies — glycoverse_deps","text":"recursive TRUE, also list dependencies glycoverse packages. repos repositories use check updates. Defaults getOption(\"repos\").","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"List all packages in the glycoverse — glycoverse_packages","title":"List all packages in the glycoverse — glycoverse_packages","text":"List packages glycoverse","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all packages in the glycoverse — glycoverse_packages","text":"","code":"glycoverse_packages(include_self = TRUE)"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all packages in the glycoverse — glycoverse_packages","text":"include_self Include glycoverse list?","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all packages in the glycoverse — glycoverse_packages","text":"","code":"glycoverse_packages() #>  [1] \"cli\"        \"dplyr\"      \"purrr\"      \"rlang\"      \"rstudioapi\" #>  [6] \"tibble\"     \"glyclean\"   \"glydet\"     \"glyenzy\"    \"glyexp\"     #> [11] \"glymotif\"   \"glyparse\"   \"glyread\"    \"glyrepr\"    \"glystats\"   #> [16] \"glyvis\"     \"magrittr\"   \"glycoverse\""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a situation report on the glycoverse — glycoverse_sitrep","title":"Get a situation report on the glycoverse — glycoverse_sitrep","text":"function gives quick overview versions R RStudio well glycoverse packages. primarily designed help get quick idea going helping someone else debug problem.","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a situation report on the glycoverse — glycoverse_sitrep","text":"","code":"glycoverse_sitrep()"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update glycoverse packages — glycoverse_update","title":"Update glycoverse packages — glycoverse_update","text":"check see glycoverse packages (optionally, dependencies) --date, install interactive confirmation.","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update glycoverse packages — glycoverse_update","text":"","code":"glycoverse_update(recursive = FALSE, repos = getOption(\"repos\"))"},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update glycoverse packages — glycoverse_update","text":"recursive TRUE, also list dependencies glycoverse packages. repos repositories use check updates. Defaults getOption(\"repos\").","code":""},{"path":"https://glycoverse.github.io/glycoverse/reference/glycoverse_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update glycoverse packages — glycoverse_update","text":"","code":"if (FALSE) { # \\dontrun{ glycoverse_update() } # }"}]
